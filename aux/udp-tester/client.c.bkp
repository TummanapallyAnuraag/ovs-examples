#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdlib.h>
#include <strings.h>
#include <string.h>
#include <unistd.h>
#include <time.h>
#include <math.h>

#define SERVER_PORT 5432
#define MAX_LINE 256

int main(int argc, char * argv[]){
    FILE *fp;
    struct hostent *hp;
    struct sockaddr_in sin;
    char *host;
    char buf[MAX_LINE];
    int s, len, packet_len, no_of_packets, tgt_bw;
    if (argc == 5) {
        host            = argv[1];
        packet_len      = atoi(argv[2]);
        no_of_packets   = atoi(argv[3]);
        tgt_bw          = atoi(argv[4]);
    }
    else {
        fprintf(stderr, "usage: ./client host packet_length no_of_packets target_bandwidth(Kbps)\n");
        exit(1);
    }
    /* translate host name into peer's IP address */
    hp = gethostbyname(host);
    if (!hp) {
        fprintf(stderr, "./client: unknown host: %s\n", host);
        exit(1);
    }
    /* build address data structure */
    bzero((char *)&sin, sizeof(sin));
    sin.sin_family = AF_INET;
    bcopy(hp->h_addr, (char *)&sin.sin_addr, hp->h_length);
    sin.sin_port = htons(SERVER_PORT);
    /* active open */
    if ((s = socket(PF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("./client: socket");
        exit(1);
    }
    if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
        perror("./client: connect");
        close(s);
        exit(1);
    }
    char format[10];
    struct timespec T;
    double frac, intgr, interval = (double) 8*(packet_len+42)*no_of_packets/(1000*tgt_bw*(no_of_packets-1));
    long prog_time_correction = 152293;   /* hand calc. using wireshark data */
    frac =modf(interval, &intgr);
    frac = frac*1e9;
    T.tv_sec = (long) intgr;
    T.tv_nsec = (long) frac - prog_time_correction;
    printf("Req. Interval = %f sec\n", interval);
    printf("Sleeping %ld.%09ld sec, every packet\n", T.tv_sec, T.tv_nsec);
    // format: %-10s
    sprintf(format, "%s%ds", "%-", packet_len-1);
    while (no_of_packets--) {
        sprintf(buf, "#: %d rem", no_of_packets);
        sprintf(buf, format , buf);
        buf[MAX_LINE-1] = '\0';
        len = strlen(buf) + 1;
        send(s, buf, len, 0);
        nanosleep(&T, NULL);
    }
}
